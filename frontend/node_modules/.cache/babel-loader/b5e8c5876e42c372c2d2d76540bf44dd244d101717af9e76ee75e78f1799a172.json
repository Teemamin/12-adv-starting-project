{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\teema\\\\Downloads\\\\react-nodeJS\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\EventDetailPage.js\",\n  _s = $RefreshSig$();\nimport React, { Suspense } from 'react';\nimport { json, useRouteLoaderData, redirect, Await, defer } from 'react-router-dom';\nimport EventItem from '../components/EventItem';\nimport EventsPage from './EventsPage';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventDetailPage = () => {\n  _s();\n  const {\n    event,\n    events\n  } = useRouteLoaderData('event-detail');\n  // console.log(loaderData)\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: \"Loading event..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 27\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Await, {\n        resolve: event,\n        children: loadedEvent => /*#__PURE__*/_jsxDEV(EventItem, {\n          event: loadEvent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: \"Loading events list..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 27\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Await, {\n        resolve: events,\n        children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsPage, {\n          events: loadedEvents\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 31\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(EventDetailPage, \"SP42t2+YEs6IFgo/PrvLllNbJZk=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\nconst loadEvents = async () => {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch data'\n    }, {\n      status: 500\n    });\n  } else {\n    const reData = await response.json();\n    return reData.events;\n  }\n};\nconst loadEvent = async id => {\n  const response = await fetch(`http://localhost:8080/events/${id}`);\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch event'\n    }, {\n      status: 500\n    });\n  } else {\n    const reData = await response.json();\n    return reData.events;\n  }\n};\nexport const eventLoader = _ref => {\n  let {\n    request,\n    params\n  } = _ref;\n  const id = params.id;\n  return defer({\n    event: loadEvent(id),\n    events: loadEvents()\n  });\n};\nexport const action = async _ref2 => {\n  let {\n    request,\n    params\n  } = _ref2;\n  const id = params.id;\n  // console.log(request)\n  const response = await fetch(`http://localhost:8080/events/${id}`, {\n    method: request.method\n  });\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch delete event'\n    }, {\n      status: 500\n    });\n  } else {\n    return redirect('/events');\n  }\n};\n\n//loader func you can return the response without awaiting the resolved promise cos react router will extract the response data for you\n//therefore no need to maully extract the responses\n// const resData = await response.json();\n// return resData.events\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["React","Suspense","json","useRouteLoaderData","redirect","Await","defer","EventItem","EventsPage","EventDetailPage","event","events","textAlign","loadedEvent","loadEvent","loadedEvents","loadEvents","response","fetch","ok","message","status","reData","id","eventLoader","request","params","action","method"],"sources":["C:/Users/teema/Downloads/react-nodeJS/12-adv-starting-project/frontend/src/pages/EventDetailPage.js"],"sourcesContent":["import React, { Suspense } from 'react'\r\nimport { json,   useRouteLoaderData, redirect, Await, defer } from 'react-router-dom'\r\nimport EventItem from '../components/EventItem'\r\nimport EventsPage from './EventsPage'\r\n\r\nconst EventDetailPage = () => {\r\n    const {event,events} = useRouteLoaderData('event-detail')\r\n    // console.log(loaderData)\r\n  return (\r\n    <>\r\n      <Suspense fallback={<p style={{textAlign: 'center'}}>Loading event..</p>}>\r\n        <Await resolve={event}>\r\n          {(loadedEvent)=><EventItem event={loadEvent} />}\r\n        </Await>\r\n      </Suspense>\r\n\r\n      <Suspense fallback={<p style={{textAlign: 'center'}}>Loading events list..</p>}>\r\n         <Await resolve={events}>\r\n            {(loadedEvents)=> <EventsPage events={loadedEvents}/>}\r\n         </Await>\r\n      </Suspense>\r\n  </>\r\n   \r\n  )\r\n}\r\n\r\nexport default EventDetailPage\r\n\r\nconst loadEvents = async ()=>{\r\n  const response = await fetch('http://localhost:8080/events');\r\n  if (!response.ok) {\r\n    throw json({message: 'Could not fetch data'},{status: 500})\r\n  } else {\r\n    const reData = await response.json()\r\n    return reData.events\r\n  }\r\n}\r\n\r\nconst loadEvent = async (id)=>{\r\n  const response = await fetch(`http://localhost:8080/events/${id}`);\r\n  if (!response.ok) {\r\n      throw json({message: 'Could not fetch event'},{status: 500})\r\n  }\r\n  else{\r\n    const reData = await response.json()\r\n    return reData.events\r\n  }\r\n}\r\n\r\nexport const eventLoader = ({request,params})=>{\r\n    const id = params.id\r\n    return defer({\r\n      event: loadEvent(id),\r\n      events: loadEvents()\r\n    })\r\n  \r\n\r\n}\r\n\r\n    \r\nexport const action = async ({request,params})=>{\r\n  const id = params.id\r\n  // console.log(request)\r\n  const response = await fetch(`http://localhost:8080/events/${id}`,{\r\n    method: request.method\r\n  });\r\n  if (!response.ok) {\r\n      throw json({message: 'Could not fetch delete event'},{status: 500})\r\n  }\r\n  else{\r\n      return redirect('/events')\r\n  }\r\n\r\n}\r\n\r\n  //loader func you can return the response without awaiting the resolved promise cos react router will extract the response data for you\r\n    //therefore no need to maully extract the responses\r\n    // const resData = await response.json();\r\n    // return resData.events"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}