{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\teema\\\\Downloads\\\\react-nodeJS\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\EventsPage.js\",\n  _s = $RefreshSig$();\nimport EventsList from '../components/EventsList';\nimport { useLoaderData, json } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 16\n    }, this);\n  }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 6\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport const loader = async () => {\n  //this is a client side code\n  const response = await fetch('http://localhost:8080/eventstyfugk');\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch data'\n    }, {\n      status: 500\n    });\n    // return {isError: true, message: 'there was an issue fetching the data'} an alterantive to handle error\n    // throw new Response(JSON.stringify({message: 'Could not fetch data', status: 500}))\n  } else {\n    return response; // you can return the response without awaiting the resolved promise cos react router will extract the response data for you\n    //therefore no need to maully extract the responses\n    // const resData = await response.json();\n    // return resData.events\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","useLoaderData","json","EventsPage","data","isError","message","events","loader","response","fetch","ok","status"],"sources":["C:/Users/teema/Downloads/react-nodeJS/12-adv-starting-project/frontend/src/pages/EventsPage.js"],"sourcesContent":["import EventsList from '../components/EventsList';\r\nimport {useLoaderData, json} from 'react-router-dom'\r\n\r\nfunction EventsPage() {\r\n    const data = useLoaderData()\r\n    if(data.isError){\r\n        return <p>{data.message}</p>\r\n    }\r\n    const events = data.events\r\n  return (\r\n    <>\r\n     <EventsList events={events} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nexport const loader = async () => {\r\n    //this is a client side code\r\n    const response = await fetch('http://localhost:8080/eventstyfugk');\r\n      if (!response.ok) {\r\n        throw json({message: 'Could not fetch data'},{status: 500})\r\n        // return {isError: true, message: 'there was an issue fetching the data'} an alterantive to handle error\r\n        // throw new Response(JSON.stringify({message: 'Could not fetch data', status: 500}))\r\n      } else {\r\n        return response// you can return the response without awaiting the resolved promise cos react router will extract the response data for you\r\n        //therefore no need to maully extract the responses\r\n        // const resData = await response.json();\r\n        // return resData.events\r\n      }\r\n  }"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,SAAQC,aAAa,EAAEC,IAAI,QAAO,kBAAkB;AAAA;AAAA;AAEpD,SAASC,UAAU,GAAG;EAAA;EAClB,MAAMC,IAAI,GAAGH,aAAa,EAAE;EAC5B,IAAGG,IAAI,CAACC,OAAO,EAAC;IACZ,oBAAO;MAAA,UAAID,IAAI,CAACE;IAAO;MAAA;MAAA;MAAA;IAAA,QAAK;EAChC;EACA,MAAMC,MAAM,GAAGH,IAAI,CAACG,MAAM;EAC5B,oBACE;IAAA,uBACC,QAAC,UAAU;MAAC,MAAM,EAAEA;IAAO;MAAA;MAAA;MAAA;IAAA;EAAG,iBAC5B;AAEP;AAAC,GAXQJ,UAAU;EAAA,QACFF,aAAa;AAAA;AAAA,KADrBE,UAAU;AAanB,eAAeA,UAAU;AAEzB,OAAO,MAAMK,MAAM,GAAG,YAAY;EAC9B;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC;EAChE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMT,IAAI,CAAC;MAACI,OAAO,EAAE;IAAsB,CAAC,EAAC;MAACM,MAAM,EAAE;IAAG,CAAC,CAAC;IAC3D;IACA;EACF,CAAC,MAAM;IACL,OAAOH,QAAQ;IACf;IACA;IACA;EACF;AACJ,CAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}