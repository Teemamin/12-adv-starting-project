{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\teema\\\\Downloads\\\\react-nodeJS\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\EventsPage.js\",\n  _s = $RefreshSig$();\nimport EventsList from '../components/EventsList';\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return (\n    /*#__PURE__*/\n    //<Suspense> lets you display a fallback until its children have finished loading.\n    //d promise returned by the loader is what we pass to resolve as a val, await will wait for the data to b there\n    //the func btw the await,will b execcuted by react router once the promise is resolved(once we have the data)\n    _jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: \"Loading data..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 27\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Await, {\n        resolve: events,\n        children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n          events: loadedEvents\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)\n  );\n  //   if(data.isError){\n  //       return <p>{data.message}</p>\n  //   }\n  //   const events = data.events\n  // return (\n  //   <>\n  //    <EventsList events={events} />\n  //   </>\n  // );\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nconst loadEvents = async () => {\n  //this is a client side code\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch data'\n    }, {\n      status: 500\n    });\n    // return {isError: true, message: 'there was an issue fetching the data'} an alterantive to handle error\n    // throw new Response(JSON.stringify({message: 'Could not fetch data', status: 500}))\n  } else {\n    const reData = await response.json();\n    return reData.events;\n  }\n};\nexport const loader = () => {\n  // the val returned by defer will be the val returned by our loader\n  return defer({\n    events: loadEvents()\n  });\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","useLoaderData","json","defer","Await","Suspense","EventsPage","events","textAlign","loadedEvents","loadEvents","response","fetch","ok","message","status","reData","loader"],"sources":["C:/Users/teema/Downloads/react-nodeJS/12-adv-starting-project/frontend/src/pages/EventsPage.js"],"sourcesContent":["import EventsList from '../components/EventsList';\r\nimport {useLoaderData, json, defer, Await} from 'react-router-dom'\r\nimport { Suspense } from 'react';\r\n\r\nfunction EventsPage() {\r\n    const {events} = useLoaderData()\r\n    return(\r\n      //<Suspense> lets you display a fallback until its children have finished loading.\r\n      //d promise returned by the loader is what we pass to resolve as a val, await will wait for the data to b there\r\n      //the func btw the await,will b execcuted by react router once the promise is resolved(once we have the data)\r\n      <Suspense fallback={<p style={{textAlign: 'center'}}>Loading data..</p>}>\r\n        <Await resolve={events} >\r\n          {(loadedEvents)=> <EventsList events={loadedEvents} />}\r\n        </Await>\r\n      </Suspense>\r\n    )\r\n  //   if(data.isError){\r\n  //       return <p>{data.message}</p>\r\n  //   }\r\n  //   const events = data.events\r\n  // return (\r\n  //   <>\r\n  //    <EventsList events={events} />\r\n  //   </>\r\n  // );\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nconst loadEvents = async ()=>{\r\n  //this is a client side code\r\n  const response = await fetch('http://localhost:8080/events');\r\n  if (!response.ok) {\r\n    throw json({message: 'Could not fetch data'},{status: 500})\r\n    // return {isError: true, message: 'there was an issue fetching the data'} an alterantive to handle error\r\n    // throw new Response(JSON.stringify({message: 'Could not fetch data', status: 500}))\r\n  } else {\r\n    const reData = await response.json()\r\n    return reData.events\r\n  }\r\n}\r\n\r\nexport const loader = () => {\r\n  // the val returned by defer will be the val returned by our loader\r\n    return defer({events: loadEvents()})\r\n    \r\n  }"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,SAAQC,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAO,kBAAkB;AAClE,SAASC,QAAQ,QAAQ,OAAO;AAAC;AAEjC,SAASC,UAAU,GAAG;EAAA;EAClB,MAAM;IAACC;EAAM,CAAC,GAAGN,aAAa,EAAE;EAChC;IAAA;IACE;IACA;IACA;IACA,QAAC,QAAQ;MAAC,QAAQ,eAAE;QAAG,KAAK,EAAE;UAACO,SAAS,EAAE;QAAQ,CAAE;QAAA,UAAC;MAAc;QAAA;QAAA;QAAA;MAAA,QAAK;MAAA,uBACtE,QAAC,KAAK;QAAC,OAAO,EAAED,MAAO;QAAA,UACnBE,YAAY,iBAAI,QAAC,UAAU;UAAC,MAAM,EAAEA;QAAa;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA;IAChD;MAAA;MAAA;MAAA;IAAA;EACC;EAEf;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AAAC,GArBQH,UAAU;EAAA,QACEL,aAAa;AAAA;AAAA,KADzBK,UAAU;AAuBnB,eAAeA,UAAU;AAEzB,MAAMI,UAAU,GAAG,YAAU;EAC3B;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMX,IAAI,CAAC;MAACY,OAAO,EAAE;IAAsB,CAAC,EAAC;MAACC,MAAM,EAAE;IAAG,CAAC,CAAC;IAC3D;IACA;EACF,CAAC,MAAM;IACL,MAAMC,MAAM,GAAG,MAAML,QAAQ,CAACT,IAAI,EAAE;IACpC,OAAOc,MAAM,CAACT,MAAM;EACtB;AACF,CAAC;AAED,OAAO,MAAMU,MAAM,GAAG,MAAM;EAC1B;EACE,OAAOd,KAAK,CAAC;IAACI,MAAM,EAAEG,UAAU;EAAE,CAAC,CAAC;AAEtC,CAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}